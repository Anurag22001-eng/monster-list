{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACP,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFTC,G,MAAW,SAAAR,GACvB,OAAO,qBAAKC,UAAU,YAAf,SAEAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCL/CM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACrB,uBACEZ,UAAU,SACVa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCiCzCG,E,kDAjCd,aAAc,IAAD,8BACX,gBAYHH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAYF,EAAEG,OAAOC,SAZpC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAY,IAJH,E,qDAOb,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAAKT,SAAUkB,S,oBAM9C,WACA,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUJ,SAAWoB,W,GA1BRI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.04ce84f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props) => {\r\n    return <div className='card-container'>\r\n    <img alt='monsters' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport { Card } from  '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props =>{\r\n return <div className='card-list'>\r\n      {\r\n        props.monsters.map(monster =>( <Card key = {monster.id} monster = {monster}></Card> ))\r\n      }\r\n </div>\r\n}\r\n","import React from 'react';\r\nimport './search-box.styles.css'\r\nexport const SearchBox = ({ placeholder,handleChange }) =>(\r\n    <input \r\n      className='search'\r\n      type='search' placeholder={placeholder} onChange={handleChange} />\r\n);","import React,{Component}  from 'react';\nimport './App.css';\nimport {CardList } from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nclass App extends Component{\n constructor(){\n   super();\n   this.state = {\n     monsters  :[ ]  ,\n     searchField:''\n   };\n }\n componentDidMount( ){\n   fetch('https://jsonplaceholder.typicode.com/users')\n   .then(response => response.json( ))\n   .then(users => this.setState( {    monsters: users   }) );\n }\n\nhandleChange = e =>{\n  this.setState({ searchField:e.target.value });\n}\n  render(){\n  const {monsters,searchField } = this.state;\n  const filteredMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n     <CardList monsters ={filteredMonsters} ></CardList>\n     \n      \n    </div>\n  );\n    \n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}